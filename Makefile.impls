# HOWTO add a new implementation (named "foo"):
# - Add "foo" to the IMPLS variable (alphabetical order)
# - Add a new "foo_STEP_TO_PROG" variable.
# - Add an "impls/foo/run" script.
# - Add an "impls/foo/Makefile"
# - Add an "impls/foo/Dockerfile"
# - Implement each step in "impls/foo/".

#
# Implementation specific command line settings
#

# cbm or qbasic
basic_MODE = cbm
# clj or cljs (Clojure vs ClojureScript/lumo)
clojure_MODE = clj
# gdc, ldc2, or dmd
d_MODE = gdc
# python, js, cpp, or neko
haxe_MODE = neko
# octave or matlab
matlab_MODE = octave
# python, python2 or python3
python_MODE = python
# scheme (chibi, kawa, gauche, chicken, sagittarius, cyclone, foment)
scheme_MODE = chibi
# sml (polyml, mlton, mosml)
sml_MODE = polyml
# wasmtime wasmer lucet wax  node warpy  wace_libc
wasm_MODE = wasmtime


#
# Implementation specific settings
#

IMPLS = rust

step5_EXCLUDES += bash        # never completes at 10,000
step5_EXCLUDES += basic       # too slow, and limited to ints of 2^16
step5_EXCLUDES += logo        # too slow for 10,000
step5_EXCLUDES += make        # no TCO capability (iteration or recursion)
step5_EXCLUDES += mal         # host impl dependent
step5_EXCLUDES += matlab      # never completes at 10,000
step5_EXCLUDES += plpgsql     # too slow for 10,000
step5_EXCLUDES += plsql       # too slow for 10,000
step5_EXCLUDES += powershell  # too slow for 10,000
step5_EXCLUDES += prolog      # no iteration (but interpreter does TCO implicitly)
step5_EXCLUDES += sml         # not implemented :(
step5_EXCLUDES += $(if $(filter cpp,$(haxe_MODE)),haxe,) # cpp finishes 10,000, segfaults at 100,000
step5_EXCLUDES += xslt		  # iteration cannot be expressed

dist_EXCLUDES += mal
# TODO: still need to implement dist
dist_EXCLUDES += guile io julia matlab swift


# Extra options to pass to runtest.py
bbc-basic_TEST_OPTS = --test-timeout 60
guile_TEST_OPTS = --test-timeout 120
io_TEST_OPTS = --test-timeout 120
java-truffle_TEST_OPTS = --start-timeout 30
logo_TEST_OPTS = --start-timeout 60 --test-timeout 120
mal_TEST_OPTS = --start-timeout 60 --test-timeout 120
miniMAL_TEST_OPTS = --start-timeout 60 --test-timeout 120
perl6_TEST_OPTS = --test-timeout=60
plpgsql_TEST_OPTS = --start-timeout 60 --test-timeout 180
plsql_TEST_OPTS = --start-timeout 120 --test-timeout 120
vimscript_TEST_OPTS = --test-timeout 30
ifeq ($(MAL_IMPL),vimscript)
mal_TEST_OPTS = --start-timeout 60 --test-timeout 180
else ifeq ($(MAL_IMPL),powershell)
mal_TEST_OPTS = --start-timeout 60 --test-timeout 180
endif
xslt_TEST_OPTS = --test-timeout 120


#
# Implementation specific utility functions
#

basic_STEP_TO_PROG_cbm          = impls/basic/$($(1)).bas
basic_STEP_TO_PROG_qbasic       = impls/basic/$($(1))

clojure_STEP_TO_PROG_clj        = impls/clojure/target/$($(1)).jar
clojure_STEP_TO_PROG_cljs       = impls/clojure/src/mal/$($(1)).cljc

haxe_STEP_TO_PROG_neko          = impls/haxe/$($(1)).n
haxe_STEP_TO_PROG_python        = impls/haxe/$($(1)).py
haxe_STEP_TO_PROG_cpp           = impls/haxe/cpp/$($(1))
haxe_STEP_TO_PROG_js            = impls/haxe/$($(1)).js

scheme_STEP_TO_PROG_chibi       = impls/scheme/$($(1)).scm
scheme_STEP_TO_PROG_kawa        = impls/scheme/out/$($(1)).class
scheme_STEP_TO_PROG_gauche      = impls/scheme/$($(1)).scm
scheme_STEP_TO_PROG_chicken     = impls/scheme/$($(1))
scheme_STEP_TO_PROG_sagittarius = impls/scheme/$($(1)).scm
scheme_STEP_TO_PROG_cyclone     = impls/scheme/$($(1))
scheme_STEP_TO_PROG_foment      = impls/scheme/$($(1)).scm

# Map of step (e.g. "step8") to executable file for that step
rust_STEP_TO_PROG =          impls/rust/$($(1))
